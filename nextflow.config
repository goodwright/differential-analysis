/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    goodwright/clipseq Nextflow config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

// Global default params, used in configs
params {
    // Boilerplate options
    outdir           = "./results"
    tracedir         = "${params.outdir}/pipeline_info"
    publish_dir_mode = 'copy'
    monochrome_logs  = false
    debug            = false
    ignore_params    = "run_input_check,run_diff_analysis,run_gsea"
    enable_conda     = false

    // Max resource options
    max_memory       = '128.GB'
    max_cpus         = 16
    max_time         = '240.h'

    // Input params
    samplesheet = null
    counts      = null

    // logic params
    only_input         = false
    only_diff_analysis = false
    skip_gsea          = false

    // Pipeline params
    count_sep        = '\\t'
    contrast_column  = 'condition'
    blocking_factors = ''
    comparisons      = "all"
    organism         = "human" // https://genekitr.online/docs/species.html

    // Deseq params
    dsq_test = "Wald"                  // c("Wald", "LRT")
    dsq_fit_type = "parametric"        // c("parametric", "local", "mean", "glmGamPoi")
    dsq_min_replicates_for_replace = 7 // The minimum number of replicates required in order to use replaceOutliers on a sample. I
    dsq_sf_type = 'ratio'              // c("ratio", "poscounts", "iterate")
    dsq_lfc_threshold = 0              // A non-negative value which specifies a log2 fold change threshold (
    dsq_alt_hypothesis = 'greaterAbs'  // c("greaterAbs", "lessAbs", "greater", "less")
    dsq_p_adjust_method = 'BH'         // Only option
    dsq_alpha = 0.1                    // The significance cutoff used for optimizing the independent filtering
    dsq_minmu = 0.5                    // Lower bound on the estimated count (used when calculating contrasts)
    dsq_lfcshrink_type = 'ashr'        // c("apeglm", "ashr", "normal")

    // Genekitr params
    dsq_p_thresh = 1                // p value cut off for filtering input deseq2 results table
    gsea_p_cutoff = 0.05            // numeric of cutoff for both pvalue and adjusted pvalue, default should be 0.05
    gsea_q_cutoff = 0.05            // numeric of cutoff for qvalue, default should be 0.15
    gsea_ontology = "mf"            // Biological Processes (BP) | Molecular Functions (MF) | Cellular Components (CC)
    gsea_min_gset_size = 10         // Minimal size of each gene set for analysis. Default should be 10
    gsea_max_gset_size = 500        // Maximal size. Default should be 500.
    gsea_p_adjust_method = "BH"     // Choose from “holm”, “hochberg”, “hommel”, “bonferroni”, “BH”, “BY”, “fdr”, “none”
    gsea_pathway_count = 10         // How many pathways to show on the plots
    gsea_stats_metric = "p.adjust"  // Stats metric for the plots - c("p.adjust", "pvalue", "qvalue")
    gsea_term_metric = "FoldEnrich" // Term metric for the ora plots - c("FoldEnrich", "GeneRatio", "Count", "RichFactor")
    gsea_scale_ratio = 0.25         // Plot scale ratio
    gsea_main_text_size = 5         // Plot text size
    gsea_legend_text_size = 8       // Plot legend size
}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Load pipeline switching config
includeConfig 'conf/logic.config'

profiles {
    debug { process.beforeScript = 'echo $HOSTNAME' }
    conda {
        params.enable_conda    = true
        conda.enabled          = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    mamba {
        params.enable_conda    = true
        conda.enabled          = true
        conda.useMamba         = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    docker {
        docker.enabled         = true
        docker.userEmulation   = true
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    singularity {
        singularity.enabled    = true
        singularity.autoMounts = true
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    podman {
        podman.enabled         = true
        docker.enabled         = false
        singularity.enabled    = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    shifter {
        shifter.enabled        = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        charliecloud.enabled   = false
    }
    charliecloud {
        charliecloud.enabled   = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
    }
    gitpod {
        executor.name          = 'local'
        executor.cpus          = 16
        executor.memory        = 60.GB
    }
    arm {
        docker.runOptions = '-u $(id -u):$(id -g) --platform=linux/amd64'
    }
    laptop          { includeConfig 'conf/laptop.config'          }
    test            { includeConfig 'conf/test.config'            }
    test_full       { includeConfig 'conf/test_full.config'       }
    test_multicount { includeConfig 'conf/test_multicount.config' }
    test_blocking   { includeConfig 'conf/test_blocking.config'   }
}

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
// The JULIA depot path has been adjusted to a fixed path `/usr/local/share/julia` that needs to be used for packages in the container.
// See https://apeltzer.github.io/post/03-julia-lang-nextflow/ for details on that. Once we have a common agreement on where to keep Julia packages, this is adjustable.

env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
    JULIA_DEPOT_PATH = "/usr/local/share/julia"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.tracedir}/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.tracedir}/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.tracedir}/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.tracedir}/pipeline_dag_${trace_timestamp}.html"
}

manifest {
    name            = 'goodwright/differential-analysis'
    author          = ''
    homePage        = 'https://github.com/goodwright/differential-analysis'
    description     = ''
    mainScript      = 'main.nf'
    nextflowVersion = '!>=22.10.1'
    version         = '1.0dev'
    doi             = ''
}

// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules.config'

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
